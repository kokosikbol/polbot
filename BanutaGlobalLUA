	{"name":"","code":"MainBackpack = \"Purple Backpack\"\nMiscBackpack = \"Blue Backpack\"\nGarlicNecklaceBackpack = \"Grey Backpack\"\n\nCapToLeave = -2\nLeaveHours = 9.8\nEatFood = true\nUseUtitoTempo = true\n\n-- available: \"sword\", \"axe\" and \"club\"\nSkillTrain = \"sword\"\n\nUseRings = true\n\nUseGarlicNecklaces = false\n\n-- name of the ring you want to use, by default: \"sword ring\"\nRing = \"sword ring\"\n\n-- how many times it should try to refill again before it goes trainers, default: 3\nRefillTries = 3\n\n-- DO NOT MODIFY\nManaUpPercent = 50\nProcessingTunnel = 0\n\nfunction setLureCount(count)\n\tsetspecialareavalue(\"LureCount\", \"posx\",  tostring(count))\nend\n\nfunction getLureCount()\n\treturn getspecialareavalue(\"LureCount\", \"posx\")\nend\n\nfunction setUtitoTempo(count)\n\tsetspecialareavalue(\"UtitoTempo\", \"range x\",  tostring(count))\nend\n\nfunction castedUtitoTempo()\n\treturn tonumber(getspecialareavalue(\"UtitoTempo\", \"range x\")) == 2\nend\n\nfunction onlyTrapped()\n  for i=0, 1 do\n    settargetingvalue(i, \"only if trapped\", \"true\")\n  end\nend\n\nfunction notTrapped()\n  for i=0, 1 do\n    settargetingvalue(i, \"only if trapped\", \"false\")\n  end\nend\n\nfunction enableTargeting()\n  if not gettargeting() then\n    settargeting(\"on\")\n  end\nend\n\nfunction disableTargeting()\n  setUtitoTempo(1)\n\n  if gettargeting() then\n    settargeting(\"off\")\n  end\nend\n\nfunction triggerTargeting(count)\n  if getmainbattlelistmonsters().Count  >= count then\n\n    if UseUtitoTempo and UseUtitoTempo == true and huntingSection() then\n\n      if not isstrengthened() then\n        if mppc() > 70 and cancast(\"Utito Tempo\") and gettargeting() == true then\n          if creaturesaround(2) >= 3 then\n\tif not castedUtitoTempo() then\n\t\tsetUtitoTempo(2)\n\tend\n            casthotkey(\"Utito Tempo\")\n          end\n        end\n      end\n\n    end\n\n    notTrapped()\n    enableTargeting()\n  end\nend\n\nfunction resetRefillTries()\n  log(\"Refill Tries set to 0\")\n\tsetspecialareavalue(\"RefillTries\", \"posx\",  tostring(0))\nend\n\nfunction inrcrementRefillTries()\n  log(\"Incremented Refill Tries by 1\")\n\tsetspecialareavalue(\"RefillTries\", \"posx\",  tostring((tonumber(getRefillTries()) + 1)))\n  log(getRefillTries() .. \"x refill try.\")\nend\n\nfunction getRefillTries()\n\treturn getspecialareavalue(\"RefillTries\", \"posx\")\nend\n\nfunction wait_lure(amountToLure, distance, waitTime, minimumMonsters)\n  local counter = waitTime\n  distance = distance + 1\n\n  while counter > 0 do\n    if creaturesaround(distance) >= amountToLure then\n      break\n    end\n\n    if creaturesaround(6) < minimumMonsters then\n      break\n    end\n\n    wait(200,200)\n    counter = counter - 200\n  end\n\nend\n\nfunction checkTime(leave_hour)\n  local minutes = math.floor((math.fmod(leave_hour, 1) * 60) + 0.5)\n  local hours = math.floor(leave_hour)\n\n  local now = os.date('*t')\n  local new = os.time{year = now.year, month = now.month, day = now.day, hour = hours, min = minutes }\n\n  local leave_date = os.date('*t', new)\n\n  if leave_date.hour == now.hour then\n  \tif leave_date.min < now.min then\n\t\tlog(\"Check Time is true!\")\n  \t\treturn true\n  \tend\n  end\n\n  return false\nend\n\nfunction checkSupplies()\n\tlocal supplies = { \"strong mana potion\", \"supreme health potion\", \"ultimate health potion\" }\n\n\tif CapToLeave >= cap() then\n\t\tlog(\"Low cap, checkSupplies is true!\")\n\t\treturn false\n\tend\n\n\tif HoursLeave and checkTime(HoursLeave) == true then\n\t\tlog(\"Hours Leave, checkSupplies is true!\")\n\t\treturn false\n\tend\n\n\t-- if checkHours() then\n\t-- \tlog(\"Hunting Hours, checkSuppliesis true!\")\n\t-- \treturn false\n\t-- end\n\n\tfor i=1, #supplies do\n\t\tif tonumber(getsupplyitemvalue(i-1, \"minimum up to\")) > (countsupply(supplies[i]) + 5) then\n\t\t\tlog(\"Missing \" .. supplies[i] .. \", checkSupplies  is true!\")\n\t\t\treturn false\n\t\tend\n\tend\n\n\treturn true\nend\n\nfunction needResupply(leave_cap)\n\tlocal supplies = { \"strong mana potion\", \"supreme health potion\", \"ultimate health potion\" }\n\n\tif leave_cap >= cap() then\n\t\tlog(\"Low cap, needResupply is true!\")\n\t\treturn true\n\tend\n\n\tfor i=1, #supplies do\n\t\tif math.random(tonumber(getsupplyitemvalue(i-1, \"minimum down to\")), tonumber(getsupplyitemvalue(i-1, \"maximum down to\"))) > (countsupply(supplies[i])) then\n\t\t\tlog(\"Missing \" .. supplies[i] .. \", needResupply is true!\")\n\t\t\treturn true\n\t\tend\n\tend\n\n\treturn false\nend\n\nfunction insideRoom()\n\tif posx() >= 32760  and posx() <= 32761 then\n\t if posy() >= 32627 and posy() <= 32630 then\n\t  if posz() == 7 then\n\t\treturn true\n\t  end\n\t end\n\tend\n\treturn false\nend\n\nfunction insideRoomLeave()\n\tif posx() >= 32760  and posx() <= 32761 then\n\t if posy() >= 32627 and posy() <= 32629 then\n\t  if posz() == 7 then\n\t\treturn true\n\t  end\n\t end\n\tend\n\treturn false\nend\n\nfunction GetFromDepot(destinybpname,depotwindowname,itemname)\n  local redbp = getcontainer(destinybpname).Location\n  local itempos = point(0,0)\n  local self_backpack = point(redbp.X + 30, redbp.Y + 30)\n  if (finditem(itemname,getcontainer(depotwindowname))) then\n    itempos = getitem(itemname,getcontainer(depotwindowname))\n    ldrag(itempos,self_backpack)\n  end\nend\n\nfunction OpenDepotBox(box_index)\n\n  if (getcontainer(\"Locker\") and getcontainer(\"Locker\").X == 0) and (getcontainer(\"Depot Chest\") and getcontainer(\"Depot Chest\").X == 0) then\n      opendepot()\n      wait(500,1000)\n  end\n\n\tif getcontainer(\"Locker\").X ~= 0 and getcontainer(\"Depot Chest\").X == 0 then\n    local rect = getcontainer(\"Locker\");\n\t\tlocal lockerSlots = getslots(getcontainer(\"Locker\"))\n\t\tlocal screenpos = point(lockerSlots[0].X + rect.X +5, lockerSlots[0].Y + rect.Y+5)\n\t\trclick(screenpos)\n\t\twait(1500,1900)\n\tend\n\n\tlocal depotChest = getcontainer(\"Depot Chest\")\n\tlocal slots = getslots(depotChest)\n\tif depotChest.X ~= 0 and slots.Count >= box_index then\n\t\tscreenpos = point(slots[box_index].X + depotChest.X +5, slots[box_index].Y + depotChest.Y+5)\n\t\trclick(screenpos)\n\t\twait(1500,1900)\n\tend\n\nend\n\nfunction withdrawFromStash(supplyName, index)\n\n  local itemCount = countsupply(supplyName)\n  local minimumToWithdraw = tonumber(getsupplyitemvalue(index, \"minimum up to\"))\n  local maximumToWithdraw = tonumber(getsupplyitemvalue(index, \"maximum up to\"))\n  local randomWithdraw = math.random(minimumToWithdraw, maximumToWithdraw)\n  local quantityToWithdraw = randomWithdraw - itemCount\n\n  if itemCount < randomWithdraw and quantityToWithdraw > 0 then\n  \tif getcontainer(\"Locker\").X == 0 then\n  \t\topendepot()\n  \tend\n  \twait(500,1000)\n  \topenstash()\n  \twait(500,1000)\n  \tgetstashitem(supplyName, quantityToWithdraw)\n  \twait(400,800)\n  \tclosestash()\n  \twait(200,400)\n  end\n\nend\n\nfunction wait_coords()\n  local counter = 10 * 1000 -- 10 sec\n\n  while posx() == 0 do\n    if counter <= 0 then\n      break\n    end\n    wait(100,100)\n    counter = counter - 100\n  end\n\n  log(\"Took \" .. (( 10 * 1000) - counter) .. \" ms to find coords\")\n\nend\n\nfunction wait_floor(floor)\n  local counter = 1 * 1000 -- 1 sec\n\n  while posz() ~= floor do\n    if counter <= 0 then\n      break\n    end\n    wait(100,100)\n    counter = counter - 100\n  end\n\n  log(\"Took \" .. (( 1 * 1000) - counter) .. \" ms to find floor\")\n\nend\n\nfunction huntingSection()\n return getsectionname() == \"Hunt\" or posz() > 12\nend"}
