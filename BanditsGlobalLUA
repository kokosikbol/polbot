{"name":"","code":"MainBackpack = \u0022Purple Backpack\u0022\nMiscBackpack = \u0022Blue Backpack\u0022\n\nCapToLeave = 50\nLeaveHours = 9.5\nEatFood = true\nSellItems = true\nUseUtitoTempo = true\n\n-- available: \u0022sword\u0022, \u0022axe\u0022 and \u0022club\u0022\nSkillTrain = \u0022sword\u0022\n\nUseRings = true\n\n-- name of the ring you want to use, by default: \u0022sword ring\u0022\nRing = \u0022sword ring\u0022\n\n-- how many times it should try to refill again before it goes trainers, default: 3\nRefillTries = 3\n\n-- DO NOT MODIFY\n\nfunction setLureCount(count)\n\tsetspecialareavalue(\u0022LureCount\u0022, \u0022range x\u0022, tostring(count))\nend\n\nfunction getLureCount()\n\treturn getspecialareavalue(\u0022LureCount\u0022, \u0022range x\u0022)\nend\n\nfunction onlyTrapped()\n for i=0, 1 do\n settargetingvalue(i, \u0022only if trapped\u0022, \u0022true\u0022)\n end\nend\n\nfunction notTrapped()\n for i=0, 1 do\n settargetingvalue(i, \u0022only if trapped\u0022, \u0022false\u0022)\n end\nend\n\nfunction enableTargeting()\n if not gettargeting() then\n settargeting(\u0022on\u0022)\n end\nend\n\nfunction disableTargeting()\n if gettargeting() then\n settargeting(\u0022off\u0022)\n end\nend\n\nfunction triggerTargeting(count)\n if getmainbattlelistmonsters().Count \u003E= count then\n notTrapped()\n enableTargeting()\n end\nend\n\nfunction resetRefillTries()\n log(\u0022Refill Tries set to 0\u0022)\n\tsetspecialareavalue(\u0022RefillTries\u0022, \u0022posx\u0022, tostring(0))\nend\n\nfunction inrcrementRefillTries()\n log(\u0022Incremented Refill Tries by 1\u0022)\n\tsetspecialareavalue(\u0022RefillTries\u0022, \u0022posx\u0022, tostring((tonumber(getRefillTries()) \u002B 1)))\n log(getRefillTries() .. \u0022x refill try.\u0022)\nend\n\nfunction getRefillTries()\n\treturn getspecialareavalue(\u0022RefillTries\u0022, \u0022posx\u0022)\nend\n\nfunction wait_lure(amountToLure, distance, waitTime, minimumMonsters)\n local counter = waitTime\n distance = distance \u002B 1\n\n while counter \u003E 0 do\n if creaturesaround(distance) \u003E= amountToLure then\n break\n end\n\n if creaturesaround(6) \u003C minimumMonsters then\n break\n end\n\n wait(200,200)\n counter = counter - 200\n end\n\nend\n\n\n\nfunction checkTime(leave_hour)\n local minutes = math.floor((math.fmod(leave_hour, 1) * 60) \u002B 0.5)\n local hours = math.floor(leave_hour)\n\n local now = os.date(\u0027*t\u0027)\n local new = os.time{year = now.year, month = now.month, day = now.day, hour = hours, min = minutes }\n\n local leave_date = os.date(\u0027*t\u0027, new)\n\n if leave_date.hour == now.hour then\n \tif leave_date.min \u003C now.min then\n\t\tlog(\u0022Check Time is true!\u0022)\n \t\treturn true\n \tend\n end\n\n return false\nend\n\nfunction checkSupplies()\n\tlocal supplies = { \u0022strong mana potion\u0022, \u0022great health potion\u0022, \u0022ultimate health potion\u0022 }\n\n\tif CapToLeave \u003E= cap() then\n\t\tlog(\u0022Low cap, checkSupplies is true!\u0022)\n\t\treturn false\n\tend\n\n\tif HoursLeave and checkTime(HoursLeave) == true then\n\t\tlog(\u0022Hours Leave, checkSupplies is true!\u0022)\n\t\treturn false\n\tend\n\n\t-- if checkHours() then\n\t-- \tlog(\u0022Hunting Hours, checkSuppliesis true!\u0022)\n\t-- \treturn false\n\t-- end\n\n\tfor i=1, #supplies do\n\t\tif tonumber(getsupplyitemvalue(i-1, \u0022minimum up to\u0022)) \u003E (countsupply(supplies[i]) \u002B 5) then\n\t\t\tlog(\u0022Missing \u0022 .. supplies[i] .. \u0022, checkSupplies is true!\u0022)\n\t\t\treturn false\n\t\tend\n\tend\n\n\treturn true\nend\n\nfunction needResupply(leave_cap)\n\tlocal supplies = { \u0022strong mana potion\u0022, \u0022great health potion\u0022, \u0022ultimate health potion\u0022 }\n\n\tif leave_cap \u003E= cap() then\n\t\tlog(\u0022Low cap, needResupply is true!\u0022)\n\t\treturn true\n\tend\n\n\tif HoursLeave and checkTime(HoursLeave) == true then\n\t\tlog(\u0022Hours Leave, needResupply is true!\u0022)\n\t\treturn true\n\tend\n\n\tfor i=1, #supplies do\n\t\tif math.random(tonumber(getsupplyitemvalue(i-1, \u0022minimum down to\u0022)), tonumber(getsupplyitemvalue(i-1, \u0022maximum down to\u0022))) \u003E (countsupply(supplies[i])) then\n\t\t\tlog(\u0022Missing \u0022 .. supplies[i] .. \u0022, needResupply is true!\u0022)\n\t\t\treturn true\n\t\tend\n\tend\n\n\treturn false\nend\n\nfunction GetFromDepot(destinybpname,depotwindowname,itemname)\n local redbp = getcontainer(destinybpname).Location\n local itempos = point(0,0)\n local self_backpack = point(redbp.X \u002B 30, redbp.Y \u002B 30)\n if (finditem(itemname,getcontainer(depotwindowname))) then\n itempos = getitem(itemname,getcontainer(depotwindowname))\n ldrag(itempos,self_backpack)\n end\nend\n\nfunction OpenDepotBox(box_index)\n\n if getcontainer(\u0022Locker\u0022).X == 0 and getcontainer(\u0022Depot Chest\u0022).X == 0 then\n opendepot()\n wait(500,1000)\n end\n\n\tif getcontainer(\u0022Locker\u0022).X ~= 0 and getcontainer(\u0022Depot Chest\u0022).X == 0 then\n\t\tlocal lockerSlots = getslots(getcontainer(\u0022Locker\u0022))\n\t\tlocal screenpos = point(lockerSlots[0].X \u002B rect.X \u002B5, lockerSlots[0].Y \u002B rect.Y\u002B5)\n\t\trclick(screenpos)\n\t\twait(1500,1900)\n\tend\n\n\tlocal depotChest = getcontainer(\u0022Depot Chest\u0022)\n\tlocal slots = getslots(depotChest)\n\tif depotChest.X ~= 0 and slots.Count \u003E= box_index then\n\t\tscreenpos = point(slots[box_index].X \u002B depotChest.X \u002B5, slots[box_index].Y \u002B depotChest.Y\u002B5)\n\t\trclick(screenpos)\n\t\twait(1500,1900)\n\tend\n\nend\n\nfunction withdrawFromStash(supplyName, index)\n\n local itemCount = countsupply(supplyName)\n local minimumToWithdraw = tonumber(getsupplyitemvalue(index, \u0022minimum up to\u0022))\n local maximumToWithdraw = tonumber(getsupplyitemvalue(index, \u0022maximum up to\u0022))\n local randomWithdraw = math.random(minimumToWithdraw, maximumToWithdraw)\n local quantityToWithdraw = randomWithdraw - itemCount\n\n if itemCount \u003C randomWithdraw and quantityToWithdraw \u003E 0 then\n \tif getcontainer(\u0022Locker\u0022).X == 0 then\n \t\topendepot()\n \tend\n \twait(500,1000)\n \topenstash()\n \twait(500,1000)\n \tgetstashitem(supplyName, quantityToWithdraw)\n \twait(400,800)\n \tclosestash()\n \twait(200,400)\n end\n\nend\n\nfunction insideManaShop()\n\tif posx() \u003E= 33616 and posx() \u003C= 33620 then\n\t if posy() \u003E= 31879 and posy() \u003C= 31885 then\n\t\t \treturn true\n\t\tend\n\tend\n\treturn false\nend\n\nfunction insideManaShopLeave()\n\tif posx() \u003E= 33616 and posx() \u003C= 33620 then\n\t if posy() \u003E= 31879 and posy() \u003C= 31884 then\n\t\t \treturn true\n\t\tend\n\tend\n\treturn false\nend\n\nfunction insideBanditsRoom()\n\tif posx() \u003E= 33646 and posx() \u003C= 33657 then\n\t if posy() \u003E= 31937 and posy() \u003C= 31947 then\n\t\t \treturn true\n\t\tend\n\tend\n\treturn false\nend\n\nfunction insideBanditsRoomLeave()\n\tif posx() \u003E= 33646 and posx() \u003C= 33657 then\n\t if posy() \u003E= 31937 and posy() \u003C= 31946 then\n\t\t \treturn true\n\t\tend\n\tend\n\treturn false\nend\n\nfunction insideBanditsDoors()\n\tif posx() \u003E= 33544 and posx() \u003C= 33552 then\n\t if posy() \u003E= 31973 and posy() \u003C= 31977 then\n\t\t \treturn true\n\t\tend\n\tend\n\treturn false\nend\n\nfunction insideShop()\n\tif posx() \u003E= 33632 and posx() \u003C= 31882 then\n\t if posy() \u003E= 31882 and posy() \u003C= 31885 then\n\t\t \treturn true\n\t\tend\n\tend\n\treturn false\nend\n\n\nfunction insideShopLeave()\n\tif posx() \u003E= 33632 and posx() \u003C= 31882 then\n\t if posy() \u003E= 31883 and posy() \u003C= 31885 then\n\t\t \treturn true\n\t\tend\n\tend\n\treturn false\nend\n\nfunction insideTeleport()\n\tif posx() \u003E 33540 and posz() == 11 then\n\t\treturn true\n\tend\n\n\treturn false\nend\n\nfunction wait_coords()\n local counter = 10 * 1000 -- 10 sec\n\n while posx() == 0 do\n if counter \u003C= 0 then\n break\n end\n wait(100,100)\n counter = counter - 100\n end\n\n log(\u0022Took \u0022 .. (( 10 * 1000) - counter) .. \u0022 ms to find coords\u0022)\n\nend\n\nfunction wait_floor(floor)\n local counter = 2 * 1000 -- 2 sec\n\n while posz() ~= floor do\n if counter \u003C= 0 then\n break\n end\n wait(100,100)\n counter = counter - 100\n end\n\n log(\u0022Took \u0022 .. (( 2 * 1000) - counter) .. \u0022 ms to find floor\u0022)\n\nend"}
